let {createApp} = Vue
console.log(Vue);

createApp({
    
    data(){
        return {
            allEvents : [],
            pastEvents : [],
            upcomingEvents : [],
            categories : [],
            categoriesUpcoming : [],
            attendance : {},
            revenues : {},
            attendanceUpcoming : {},
            revenuesUpcoming : {},
            capacity : "",
            lowestAssistance : "",
            highestAssistance : "",
            tablaUno: {},

        }
    },
    created(){
        fetch("https://mindhub-xj03.onrender.com/api/amazing")
        .then (response => response.json())
        .then (data =>{ 
            this.allEvents = [...data.events]
            console.log(this.allEvents);
            this.pastEvents = this.allEvents.filter (event => event.date < data.currentDate)
            console.log(this.pastEvents);

            this.upcomingEvents = this.allEvents.filter (event => event.date > data.currentDate)
            console.log(this.upcomingEvents);


            let arrayEvents = this.allEvents.map( events => events.category)
            const categorias = [...new Set(arrayEvents)]
            this.categories = categorias
            let arrayUpcoming = this.upcomingEvents.map ( events => events.category)
            const categoriasUp = [...new Set(arrayUpcoming)]
            this.categoriesUpcoming = categoriasUp


            this.calculateAttendance()
            this.calculateRevenues()
            this.calculateAttendanceUpcoming()
            this.calculateRevenuesUpcoming()
            this.highestCapacity()
            this.lowestAttendance()
            this.highestAttendance()
            console.log(this.attendanceUpcoming)
            
        })
        .catch (error => console.error(error))
    },
    methods : {
        calculateAttendance() {
            this.categories.forEach((category) => {
                const categoryEvents = this.pastEvents.filter((event) => event.category === category);
                let totalAttendance = 0;
                let totalEvents = categoryEvents.length;
        
                categoryEvents.forEach((event) => {
                  totalAttendance += (event.assistance / event.capacity) * 100;
                });
        
                if (totalEvents > 0) {
                  totalAttendance /= totalEvents;
                }
        
                this.attendance[category] = totalAttendance.toFixed(2);
              });
            
        },
        calculateRevenues() {
            this.categories.forEach((category) => {
              const categoryEvents = this.pastEvents.filter((event) => event.category === category);
              let totalRevenue = 0;
              categoryEvents.forEach((event) => {
                totalRevenue += event.assistance * event.price;
              });
              this.revenues[category] = totalRevenue;
            });
        },
        calculateAttendanceUpcoming() {
            this.categoriesUpcoming.forEach((category) => {
                const categoryEvents = this.upcomingEvents.filter((event) => event.category === category);
                let totalAttendance = 0;
                let totalEvents = categoryEvents.length;
        
                categoryEvents.forEach((event) => {
                  totalAttendance += ((event.estimate) / event.capacity) * 100;
                });
        
                if (totalEvents > 0) {
                  totalAttendance /= totalEvents;
                }
        
                this.attendanceUpcoming[category] = totalAttendance.toFixed(2);
              });
            
        },
        calculateRevenuesUpcoming() {
            this.categoriesUpcoming.forEach((category) => {
              const categoryEvents = this.upcomingEvents.filter((event) => event.category === category);
              let totalRevenue = 0;
              categoryEvents.forEach((event) => {
                totalRevenue += (event.estimate) * event.price;
              });
              this.revenuesUpcoming[category] = totalRevenue;
            });
        },
        highestAttendance(){
            let percentage = 0
            let eventName = ""

            this.pastEvents.forEach(event => {
                let highAttendance = (event.assistance / event.capacity) * 100
                if(highAttendance > percentage){
                    percentage = highAttendance
                    eventName = event.name
                }
                this.highestAssistance = `${eventName}, ${percentage.toFixed(2)}%`
            })
        },
        lowestAttendance(){
            let percentage = 100
            let eventName = ""

            this.pastEvents.forEach(event => {
                let lowAttendance = (event.assistance / event.capacity) * 100
        
                if (lowAttendance < percentage){
                percentage = lowAttendance
                eventName = event.name
                }
            })
            this.lowestAssistance = `${eventName}, ${percentage.toFixed(2)}%`
        },
        highestCapacity(){
            let eventName = ""
            let capacity = 0
            
            this.pastEvents.forEach(event => {
        
                if (event.capacity > capacity){
                eventName = event.name
                capacity = event.capacity
            
            }
        })
        this.capacity = `${eventName}, ${capacity}`
        },
    },


}).mount("#app")
